set nocompatible
filetype off
set t_Co=256

set splitright

set clipboard=none

set wildmenu

set encoding=utf-8

" map leader
let mapleader=","

" backspcae fix
set backspace=indent,eol,start


" enable syntax highlighting 
syntax enable


" show line number
set number



" show a visual line under the cursor's current line set cursorline 

" show the matching part of the pair for [] {} and ()
set showmatch

" set split direction

set splitbelow
set splitright


" enable all Python syntax highlighting features 
let python_highlight_all = 1

" remember more commands and serach history 
set history=7000

" use many muchos levels of undo
set undolevels=1000

" enable mouse
set mouse=a

"set to auto read when a file is changed from the outside 
set autoread


" ignore compiled files
set wildignore=*.o,*~,&.pyc

set viminfo+=! " make sure vim history works



" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
""Vim Basic 
Plugin 'owickstrom/vim-colors-paramount' 
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Raimondi/delimitMate'
Plugin 'flazz/vim-colorschemes'
Plugin 'Valloric/YouCompleteMe'
" Plugin 'kien/ctrlp.vim'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/neomru.vim'
Plugin 'majutsushi/tagbar'
Plugin 'MattesGroeger/vim-bookmarks'
Plugin 'Valloric/MatchTagAlways'

Plugin 'othree/html5.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'tmhedberg/SimpylFold'
Plugin 'godlygeek/tabular'
" Plugin 'python-rope/ropevim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'myusuf3/numbers.vim'
Plugin 'scrooloose/syntastic'
Plugin 'ternjs/tern_for_vim'
Plugin 'terryma/vim-multiple-cursors'

""Vim Python
" Plugin 'vim-scripts/indentpython.vim'

" Vim Debugger
Plugin 'vim-scripts/yavdb'

""Vim Javascript 
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'bigfish/vim-js-context-coloring'
Plugin 'othree/jspc.vim'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'matthewsimo/angular-vim-snippets'

call vundle#end()

"""" Settings

set tags=tags

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" map <C-n> :NERDTreeToogle<CR>

let g:NERDTreeWinSize=20
let NERDTreeIgnore = ['\.pyc$']

map <leader>n <plug>NERDTreeTabsToggle<CR>


" These are the tweaks I apply to YCM's config, you don't need them but they might help.
" YCM gives you popups and splits by default that some people might not like, so these should tidy it up a bit for you.

let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>



" This does what it says on the tin. It will check your file on open too, not just on save.
" You might not want this, so just leave it out if you don't.

let g:syntastic_check_on_open=1

" colo paramount 

noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Centering the cursor
"nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>
"nnoremap j jzz
"nnoremap k kzz
"nnoremap n nzz
"nnoremap N Nzz
"nnoremap * *zz
"nnoremap # #zz
"nnoremap g* g*zz
"nnoremap g# g#zz

" shortcut remap
nnoremap '; :
" noremap <leader><Tab> <Esc>

nnoremap ;' :CtrlPTag<CR>
nnoremap <silent> <Leader>b :TagbarToggle<CR>

" Set Space to Fold/Unfold
" nnoremap ,<space> za
" ; to cntrpBuffer
" noremap <leader>; :CtrlPBuffer<CR>


map <C-J> <C-W>j<C-W>_ " open and maximize the split below
map <C-K> <C-W>k<C-W>_ " open and maximize the split above
set wmh=0 " reduces splits to a single line 

map  <C-l> :tabn<CR>
map  <C-h> :tabp<CR>
map  <C-n> :tabnew<CR>

"split navigations
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-Li>
"nnoremap <C-H> <C-W><C-H>

nnoremap vrc :tabnew ~/.vimrc<cr>
nnoremap rvrc :so ~/.vimrc<cr>

nnoremap ,w :w<cr>


" let g:ctrlp_map = ';;'
nnoremap <S-H> :vertical resize -5<cr>
"nnoremap <S-K> :resize +5<cr>
"nnoremap <S-J> :resize -5<cr>
nnoremap <S-L> :vertical resize +5<cr>


" Maps from  https://github.com/terryma/dotfiles/blob/master/.vimrc 

" Ctrl-\: Quick outline
nmap <silent> <c-\> [unite]o

" Ctrl-a: TODO

" Ctrl-s: Save
nmap <c-s> :w!<CR>





"===============================================================================
" Visual Mode Ctrl Key Mappings
"===============================================================================

" Ctrl-c: Copy (works with system clipboard due to clipboard setting)
vnoremap <c-c> y`]

" Ctrl-r: Easier search and replace
vnoremap <c-r> "hy:%s/<c-r>h//gc<left><left><left>

" Ctrl-s: Easier substitue
vnoremap <c-s> :s/\%V//g<left><left><left>

" Ctrl-f: Find highlight word with FZF
vnoremap <c-f> "hy:Ag <c-r>h<cr>

"===============================================================================
" Normal Mode Meta/Alt Key Mappings
"===============================================================================
" Fix alt key keycodes. Using keycodes instead of escape sequence for mapping will use ttimeout instead of timeout,
" which means pressing escape will not cause a delay.
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "set <A-".toupper(c).">=\e".toupper(c)
  let c = nr2char(1+char2nr(c))
endw

" Alt-a: Select all
nnoremap <silent> <A-a> :keepjumps normal ggVG<CR>

" Alt-h: tmux

" Alt-j: Move current line down
" nnoremap <silent> <A-j> mz:m+<cr>`z==

" Alt-k: Move current line up
" nnoremap <silent> <A-k> mz:m-2<cr>`z==

" Alt-l: tmux

" Alt-Shift-j: Duplicate line down
" nnoremap <silent> <A-J> mzyyp`zj

" Alt-Shift-k: Duplicate line up
" nnoremap <silent> <A-K> mzyyp`z

" Alt-o: Jump back in the changelist
" nnoremap <A-o> g;

" Alt-n: tmux

"===============================================================================
" Insert Mode Meta/Alt Key Mappings
"===============================================================================

" Alt-j: Move current line down
" imap <A-j> <esc><m-j>a

" Alt-k: Move current line down
" imap <A-k> <esc><m-k>a

"===============================================================================
" Visual Mode Meta/Alt Key Mappings
"===============================================================================

" Alt-j: Move selections down
" vnoremap <A-j> :m'>+<cr>`<my`>mzgv`yo`z

" Alt-k: Move selections up
" vnoremap <A-k> :m'<-2<cr>`>my`<mzgv`yo`z





















" Enable folding 

set foldmethod=indent
set foldlevel=99
let g:SimpylFold_docstring_preview=1


set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" PEP8 INDENTATION

"au BufNewFile, BufRead *.py
"	\ set tabstop=4
"	\ set softtabstop=4
"	\ set shiftwidth=4
"	\ set textwidth=79
"	\ set expandtab
"	
"	\ set fileformat=unix


"au BufNewFile,BufRead *.js, *.html, *.css
"	\ set tabstop=2
"	\ set softtabstop=2
"	\ set shiftwidth=2
"	
" Flat for Unnecessary White space 

" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

"python with virtualenv support
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"	project_base_dir = os.environ['VIRTUAL_ENV']
"	activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"	execfile(activate_this, dict(__file__=activate_this))
"EOF
"

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux

" let g:ctrlp_working_path_mode = 'ca'
"let g:ctrlp_custom_ignore = {
"  \ 'dir':  '\v[\/]\.(git|hg|svn)$\|webapp\/js|node_modules|bower_components', 
"	\ 'file': '\v\.(exe|so|dll)$', 
"	\ 'link': 'some_bad_symbolic_links', 
"	\ } 

" The Silver Searcher
"if executable('ag')
"  " Use ag over grep
"  set grepprg=ag\ --nogroup\ --nocolor
"
"  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
"
"  " ag is fast enough that CtrlP doesn't need to cache
"  let g:ctrlp_use_caching = 0
"endif



" rope config
" let ropevim_vim_completion=1
" let ropevim_extended_complete=1



"===============================================================================
" Unite
"===============================================================================
" TODO Slowly phase out unite and replace by fzf
" Use the fuzzy matcher for everything
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
" Use the rank sorter for everything
" call unite#filters#sorter_default#use(['sorter_rank'])

" Set up some custom ignores
" call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      " \ 'ignore_pattern', join([
      " \ '\.git/',
      " \ 'git5/.*/review/',
      " \ 'google/obj/',
      " \ 'tmp/',
      " \ '.sass-cache',
      " \ 'node_modules/',
      " \ 'bower_components/',
      " \ 'dist/',
      " \ '.git5_specs/',
      " \ '.pyc',
      " \ 'build/',
      " \ ], '\|'))

" Map space to the prefix for Unite
nnoremap [unite] <Nop>
" nmap <space> [unite]

" General fuzzy search
nnoremap <silent> [unite]<space> :<C-u>Unite
      \ -buffer-name=files buffer file_mru bookmark file_rec/async<CR>

" Quick registers
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>

nnoremap <silent> [unite]u :<C-u>Unite -buffer-name=buffers file_mru buffer<CR>
" Quick buffer and mru

" Quick yank history
nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<CR>

" Quick outline
nnoremap <silent> [unite]o :<C-u>Unite -buffer-name=outline -vertical outline<CR>

" Quick sessions (projects)
nnoremap <silent> [unite]p :<C-u>Unite -buffer-name=sessions session<CR>

" Quick sources
nnoremap <silent> [unite]a :<C-u>Unite -buffer-name=sources source<CR>

" Quick snippet
nnoremap <silent> [unite]s :<C-u>Unite -buffer-name=snippets ultisnips<CR>

" Quickly switch lcd
nnoremap <silent> [unite]d
      \ :<C-u>Unite -buffer-name=change-cwd -default-action=cd directory_mru directory_rec/async<CR>

" Quick file search
nnoremap <silent> [unite]f :<C-u>Unite -buffer-name=files file_rec/async file/new<CR>

" Quick grep from cwd
nnoremap <silent> [unite]g :<C-u>Unite -buffer-name=grep grep:.<CR>

" Quick help
nnoremap <silent> [unite]h :<C-u>Unite -buffer-name=help help<CR>

" Quick line using the word under cursor
" nnoremap <silent> [unite]l :<C-u>UniteWithCursorWord -buffer-name=search_file line<CR>

" Quick line
nnoremap <silent> [unite]l :<C-u>Unite -buffer-name=search_file line<CR>

" Quick MRU search
nnoremap <silent> [unite]m :<C-u>Unite -buffer-name=mru file_mru<CR>

" Quick find
nnoremap <silent> [unite]n :<C-u>Unite -buffer-name=find find:.<CR>

" Quick commands
nnoremap <silent> [unite]c :<C-u>Unite -buffer-name=commands command<CR>

" Quick bookmarks
nnoremap <silent> [unite]b :<C-u>Unite -buffer-name=bookmarks bookmark<CR>

" Fuzzy search from current buffer
" nnoremap <silent> [unite]b :<C-u>UniteWithBufferDir
" \ -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>

" Quick commands
nnoremap <silent> [unite]; :<C-u>Unite -buffer-name=history -default-action=edit history/command command<CR>



" Start in insert mode
let g:unite_enable_start_insert = 1

let g:unite_data_directory = "~/.unite"

" Enable short source name in window
" let g:unite_enable_short_source_names = 1

" Enable history yank source
" let g:unite_source_history_yank_enable = 1

" Open in bottom right
let g:unite_split_rule = "botright"

" Shorten the default update date of 500ms
let g:unite_update_time = 200

let g:unite_source_file_mru_limit = 1000
let g:unite_cursor_line_highlight = 'TabLineSel'
" let g:unite_abbr_highlight = 'TabLine'

let g:unite_source_file_mru_filename_format = ':~:.'
let g:unite_source_file_mru_time_format = ''

" For ack.
if executable('ack-grep')
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts = '-i --no-heading --no-color -a -H'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ack')
  let g:unite_source_grep_command = 'ack'
  let g:unite_source_grep_default_opts = '-i --no-heading --no-color -a -H'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
        \ '-i --vimgrep --hidden --ignore ' .
        \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
  let g:unite_source_grep_recursive_opt = ''
endif

let g:unite_source_rec_max_cache_files = 99999

